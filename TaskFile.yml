# Taskfile for automating the GGM deployment process
#
# This Taskfile defines tasks for:
# - Validating required tools and variables
# - Importing an XMI file into Crunch UML and transforming it naar een informatiemodel en uitwisselmodel
# - Generating a JSON Schema from the uitwisselmodel
# - Generating Markdown documentation from the informatiemodel
# - Deploying documentation with MkDocs and Mike
# - Publishing documentation to GitHub Pages
#
# Usage:
# - Run `task` to execute the default task (full-deploy)
# - Run `task --list` to see all available tasks
# - Run `task <taskname>` to execute a specific task
#
# Environment:
# - A `.env` file is used to load configuration variables like VERSION, XMI_FILE, etc.
# - Ensure required tools are installed before running (`task check-tools`)
#
# Examples:
# - To check preconditions: `task check-tools && task check-vars`
# - To import the XMI file and transform the model: `task import-xmi`
# - To generate the JSON schema: `task generate-json-schema`
# - To generate the documentation: `task generate-docs`
# - To deploy the documentation locally: `task deploy-docs`
# - To publish the documentation to GitHub Pages: `task publish-docs`
# - To perform the entire deployment sequence: `task full-deploy`
#
# Author: Arjen Brienen
# Last Updated: 17 april 2025
version: '3'

# Default task wordt uitgevoerd bij 'task' zonder argument
silent: true
default: full-deploy

dotenv: ['.env']

vars:
  VERSION_DIR: "./{{.VERSION}}"
  XMI: "data/{{.XMI_FILE}}"
  CRUNCH_UML_DB: "./crunch_uml.db"
  DOCS: "./docs"
  DEFS: "./docs/definities"
  PUBLISH: "false"
  JSON: "{{.VERSION_DIR}}/{{.JSON_SCHEMA}}"
  
tasks:
  check-tools:
    desc: "Check for pre conditions. Verify required tools are installed."
    cmds:
      - |
        # Lijst van vereiste tools en hun download-URLs
        declare -A tools=(
          ["crunch_uml"]="https://github.com/brienen/crunch_uml"
          ["mkdocs"]="https://www.mkdocs.org"
          ["mike"]="https://github.com/jimporter/mike"
          ["jq"]="https://stedolan.github.io/jq"
        )

        # Controleer of tools geÃ¯nstalleerd zijn
        missing_tools=()
        for tool in "${!tools[@]}"; do
          if ! command -v $tool &> /dev/null; then
            missing_tools+=($tool)
          fi
        done

        # Meld ontbrekende tools en geef installatie-instructies
        if [ ${#missing_tools[@]} -ne 0 ]; then
          echo "Error: The following tools are not installed:"
          for tool in "${missing_tools[@]}"; do
            echo "- $tool: ${tools[$tool]}"
          done
          echo "Please install the missing tools and try again."
          exit 1
        else
          echo "All required tools are installed."
        fi
    shell: bash

  check_vars:
    desc: "Check for pre conditions. Validate required variables VERSION and check if VERSION_DIR exist."
    cmds:
      - |
        # Valideer invoerparameters
        echo "Validating input parameter {{.VERSION}} ..."
      - |
        if [ -z "{{.VERSION}}" ]; then
          echo "Error: VERSION cannot be empty."
          exit 1
        fi
        if [[ ! "{{.VERSION}}" =~ ^v[0-9]+\.[0-9]+(\.[0-9]+)*$ ]]; then
          echo "Error: Invalid VERSION format. Use v{number}.{number}, e.g., v1.0"
          exit 1
        fi
        if [ ! -d "{{.VERSION_DIR}}" ]; then
          echo "Error: Directory '{{.VERSION_DIR}}' does not exist."
          exit 1
        fi
      - |
        # Valideer invoerparameters
        echo "VERSION {{.VERSION}} and Versiondir {{.VERSION_DIR}} are valid..."
    shell: bash

  import-xmi:
    desc: "Import the XMI file into Crunch UML Database."
    deps: [check-tools, check_vars]
    cmds:
      - |
        if [ ! -f "{{.XMI}}" ]; then
          echo "Error: XMI file '{{.XMI}}' does not exist."
          exit 1
        fi
      - echo "Importing XMI file '{{.XMI}}' into Crunch UML..."
      - crunch_uml import -f "{{.XMI}}" -t eaxmi -db_create
      - echo "Extracting and tranforming schuldhulp datamodel..."
      - crunch_uml transform -ttp plugin -sch_to {{.IM_SCHEMA_SCHULDHULP}} -rt_pkg "{{.ROOT_IM_SCHULDHULP}}" --plugin_class_name {{.IM_TRANSFORMER_CLASS_SCHULDHULP}} --plugin_file_name {{.IM_TRANSFORMER_SCHULDHULP}}
      - echo "Extracting and tranforming schuldhulp uitwisselmodel..."
      - crunch_uml transform -ttp plugin -sch_from {{.IM_SCHEMA_SCHULDHULP}} -sch_to {{.UM_SCHEMA_SCHULDHULP}} -rt_pkg "{{.ROOT_IM_SCHULDHULP}}" --plugin_class_name {{.UM_TRANSFORMER_SCHULDHULP_CLASS}} --plugin_file_name {{.UM_TRANSFORMER_SCHULDHULP}}
      - echo "Extracting and tranforming vroegsignalering datamodel..."
      - crunch_uml transform -ttp plugin -sch_to {{.IM_SCHEMA_VROEGSIGNALERING}} -rt_pkg "{{.ROOT_IM_VROEGSIGNALERING}}" --plugin_class_name {{.IM_TRANSFORMER_CLASS_SCHULDHULP}} --plugin_file_name {{.IM_TRANSFORMER_VROEGSIGNALERING}}
      - echo "Extracting and transforming vroegsignalering uitwisselmodel..."
      - crunch_uml transform -ttp plugin -sch_from {{.IM_SCHEMA_VROEGSIGNALERING}} -sch_to {{.UM_SCHEMA_VROEGSIGNALERING}} -rt_pkg "{{.ROOT_IM_VROEGSIGNALERING}}" --plugin_class_name {{.UM_TRANSFORMER_VROEGSIGNALERING_CLASS}} --plugin_file_name {{.UM_TRANSFORMER_VROEGSIGNALERING}}
      - echo "Crunch database successfully created and setup..."
    shell: bash
    sources:
      - "{{.XMI}}"
      - "{{.IM_TRANSFORMER_SCHULDHULP}}"
      - "{{.UM_TRANSFORMER_SCHULDHULP}}"
      - "{{.IM_TRANSFORMER_VROEGSIGNALERING}}"
      - "{{.UM_TRANSFORMER_VROEGSIGNALERING}}"
    generates:
      - "{{.CRUNCH_UML_DB}}"
    run: when_changed

  generate-json-schema-for:
    desc: "Generate JSON Schema from a specified uitwisselmodel."
    deps: [import-xmi]
    cmds:
      - echo "Generate JSON Schema '{{.JSON}}' from schema '{{.UM_SCHEMA}}' using root class '{{.ROOT_CLASS}}'..."
      - crunch_uml -sch {{.UM_SCHEMA}} -d export -t json_schema --output_class_id {{.ROOT_CLASS}} -js_url {{.SCHEMA_URL}} -f {{.JSON}}
    shell: bash
    requires:
      vars: ["UM_SCHEMA", "ROOT_CLASS", "SCHEMA_URL", "JSON"]

  generate-json-schema:
    desc: "Generate JSON Schema for all defined use cases."
    deps: [import-xmi]
    cmds:
      - task: generate-json-schema-for
        vars:
          UM_SCHEMA: "{{.UM_SCHEMA_SCHULDHULP}}"
          ROOT_CLASS: "{{.ROOT_CLASS_UM_SCHULDHULP}}"
          SCHEMA_URL: "{{.SCHULDHULP_JSON_SCHEMA_URL}}"
          JSON: "{{.JSON}}"
      - task: generate-json-schema-for
        vars:
          UM_SCHEMA: "{{.UM_SCHEMA_VROEGSIGNALERING}}"
          ROOT_CLASS: "{{.ROOT_CLASS_UM_VROEGSIGNALERING}}"
          SCHEMA_URL: "{{.SCHULDHULP_JSON_SCHEMA_URL}}"
          JSON: "{{.JSON}}"
    shell: bash

  generate-docs-for:
    desc: "Generate Markdown documentation from the model."
    deps: [import-xmi]
    cmds:
      - echo "Generating definitions documentation using jinja template for use case {{.USECASE}}..."
      - crunch_uml -sch {{.IM_SCHEMA}} export -t jinja2 --output_jinja2_template ddas_markdown.j2 -f "{{.DEFS}}/{{.MD}}" --output_jinja2_templatedir ./tools/
      - echo "Generating uitleg documentation using jinja template for use case {{.USECASE}}..."
      - crunch_uml -sch {{.IM_SCHEMA}} export -t jinja2 --output_jinja2_template {{.UITLEG_TEMPLATE}} -f "{{.DOCS}}/{{.USECASE}}/{{.UITLEG}}" --output_jinja2_templatedir ./tools/
      - |
        # Vervang de versies in de uitwisselspecificatie-templates
        # Loop door alle .template-bestanden in de directory en submappen
        echo "Processing template files in {{.USECASE}}/{{.DOCS}} ..."
        for file in $(find "{{.DOCS}}/{{.USECASE}}" -type f -name "*.template"); do
          # Bepaal de doelbestandnaam door ".template" te verwijderen
          output_file="${file%.template}"

          # Gebruik sed om de placeholder ###VERSION### te vervangen door de versie
          sed "s/###VERSION###/{{.VERSION}}/g" "$file" > "$output_file"

          # Geef een bericht over de verwerking
          echo "Processed $file -> $output_file"
        done
    shell: bash
    requires:
      vars: ["USECASE", "UITLEG_TEMPLATE", "IM_SCHEMA"]

  generate-docs:
    desc: "Generate Markdown documentation from the model."
    cmds:
      - echo "Generating Markdown documentation..."
      - mkdir -p "{{.DEFS}}"
      - rm -rf "{{.DEFS}}"/*.md
      - task: generate-docs-for
        vars:
          USECASE: "schuldhulpverlening"
          UITLEG_TEMPLATE: "uitleg-schuldhulp.j2"
          IM_SCHEMA: "{{.IM_SCHEMA_SCHULDHULP}}"
      - task: generate-docs-for
        vars:
          USECASE: "vroegsignalering"
          UITLEG_TEMPLATE: "uitleg-vroegsignalering.j2"
          IM_SCHEMA: "{{.IM_SCHEMA_VROEGSIGNALERING}}"
    shell: bash

  deploy-docs-schuldhulp:
    desc: "Schuldhulp: Build and deploy the documentation locally using MkDocs and Mike. After deployment, use 'mike serve' or 'mkdocs serve' to view the results."
    deps: [generate-docs]
    cmds:
      - echo "Schuldhulp, Building and deploying MkDocs and Mike..."
      - cp mkdocs.schuldhulp.yml mkdocs.yml
      - mkdocs build
      - mike deploy "{{.VERSION}}"
      - mike set-default "{{.VERSION}}"
      - echo "Schuldhulp, Documentation deployed. Use 'mike serve' or 'mkdocs serve' to view results..."
    shell: bash

  deploy-docs-vroegsignalering:
    desc: "Vroegsignalering: Build and deploy the documentation locally using MkDocs and Mike. After deployment, use 'mike serve' or 'mkdocs serve' to view the results."
    deps: [generate-docs]
    cmds:
      - echo "Vroegsignalering, Building and deploying MkDocs and Mike..."
      - cp mkdocs.vroegsignalering.yml mkdocs.yml
      - mkdocs build
      - mike deploy "{{.VERSION}}"
      - mike set-default "{{.VERSION}}"
      - echo "Vroegsignalering, Documentation deployed. Use 'mike serve' or 'mkdocs serve' to view results..."
    shell: bash

  deploy-docs:
    desc: "Build and deploy all the documentation locally using MkDocs and Mike. After deployment, use 'mike serve' or 'mkdocs serve' to view the results."
    cmds:
      - task: deploy-docs-schuldhulp
      - task: deploy-docs-vroegsignalering
    shell: bash

  publish-docs:
    desc: "Publish the documentation directly to GitHub Pages."
    deps: [deploy-docs]
    prompt:
     - Dit commando publiceert de documentatie direct naar de LIVE GitHub pages. Doorgaan?
     - Weet je het zeker?
    cmds:
      - echo 'Deploying to GitHub Pages...'
      - git push origin gh-pages

  publish-test:
    desc: "Publish the documentation to test location on host {{.FTP_HOST}}"
    deps: [deploy-docs]
    cmds:
      - echo 'Deploying to test location...'
      - lftp -e "set ssl:verify-certificate no; cd {{.FTP_REMOTE_DIR}}; mirror -R --delete --verbose ./{{.FTP_LOCAL_DIR}} .; bye" {{.FTP_HOST}}

  full-deploy:
    desc: "Execute the entire deployment process: json-schema, and documentation"
    cmds:
      - task: deploy-docs 
      - echo "Documentation deployment completed."
      - task: generate-json-schema 
      - echo "JSON-schema generation completed."
      - echo "Full deployment completed."
    shell: bash